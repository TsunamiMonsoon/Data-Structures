// FILE: bintree.template
// IMPLEMENTS: The binary_tree node class (see bintree.h for documentation). 
#include     // Provides assert
#include    // Provides NULL, std::size_t
#include     // Provides std::setw
#include    // Provides std::cout

namespace main_savitch_10
{
    template 
    void inorder(Process f, BTNode* node_ptr)
    // Library facilities used: cstdlib
    {
        if (node_ptr != NULL)
        {
            inorder(f, node_ptr->left( ));
            f( node_ptr->data( ) );
            inorder(f, node_ptr->right( ));
        }
    }

    template 
    void postorder(Process f, BTNode* node_ptr)
    // Library facilities used: cstdlib
    {
        if (node_ptr != NULL)
        {
            postorder(f, node_ptr->left( ));
            postorder(f, node_ptr->right( ));
            f(node_ptr->data( ));
        }
    }

    template 
    void preorder(Process f, BTNode* node_ptr)
    // Library facilities used: cstdlib
    {
        if (node_ptr != NULL)
        {
            f( node_ptr->data( ) );
            preorder(f, node_ptr->left( ));
            preorder(f, node_ptr->right( ));
        }
    }

    template 
    void print(binary_tree_node* node_ptr, SizeType depth)
    // Library facilities used: iomanip, iostream, stdlib
    {
        if (node_ptr != NULL)
        {
            print(node_ptr->right( ), depth+1);
            std::cout << std::setw(4*depth) << ""; // Indent 4*depth spaces.
            std::cout << node_ptr->data( ) << std::endl;
            print(node_ptr->left( ),  depth+1);
        }
    }    
        
    template 
    void tree_clear(binary_tree_node*& root_ptr)
    // Library facilities used: cstdlib
    {
        binary_tree_node* child;
        if (root_ptr != NULL)
        {
            child = root_ptr->left( );
            tree_clear( child );
            child = root_ptr->right( );
            tree_clear( child );
            delete root_ptr;
            root_ptr = NULL;
        }
    }

    template 
    binary_tree_node* tree_copy(const binary_tree_node* root_ptr)
    // Library facilities used: cstdlib
    {
        binary_tree_node *l_ptr;
        binary_tree_node *r_ptr;

        if (root_ptr == NULL)
            return NULL;
        else
        {
            l_ptr = tree_copy( root_ptr->left( ) );
            r_ptr = tree_copy( root_ptr->right( ) );
            return
                new binary_tree_node( root_ptr->data( ), l_ptr, r_ptr);
        }
    }

    template 
    size_t tree_size(const binary_tree_node* node_ptr)
    // Library facilities used: cstdlib
    {
        if (node_ptr == NULL)
            return 0;
        else 
            return 
            1 + tree_size(node_ptr->left( )) + tree_size(node_ptr->right( ));
    }    
}